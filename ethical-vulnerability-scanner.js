const puppeteer = require('puppeteer');

async function testXSS(page, url) {
  const xssPayloads = [
    '<script>alert("XSS")</script>',
    '"><script>alert("XSS")</script>',
    '"><img src=x onerror=alert("XSS")>'
  ];

  for (const payload of xssPayloads) {
    await page.goto(url);
    const inputs = await page.$$('input[type="text"], textarea');
    for (const input of inputs) {
      await input.type(payload);
      await page.keyboard.press('Enter');
      const alertPresent = await page.evaluate(() => {
        return window.alert !== undefined && window.alert !== null;
      });
      if (alertPresent) {
        console.log(`Potential XSS vulnerability found with payload: ${payload}`);
      }
    }
  }
}

async function testSQLInjection(page, url) {
  const sqlPayloads = [
    "' OR '1'='1",
    "1; DROP TABLE users--",
    "1 UNION SELECT username, password FROM users--"
  ];

  for (const payload of sqlPayloads) {
    await page.goto(url);
    const inputs = await page.$$('input[type="text"], input[type="password"]');
    for (const input of inputs) {
      await input.type(payload);
      await page.keyboard.press('Enter');
      const content = await page.content();
      if (content.includes("SQL syntax") || content.includes("database error")) {
        console.log(`Potential SQL Injection vulnerability found with payload: ${payload}`);
      }
    }
  }
}

async function main() {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  const testUrl = 'http://your-test-website.com'; // Replace with your controlled test environment
  
  console.log('Testing for XSS vulnerabilities...');
  await testXSS(page, testUrl);
  
  console.log('Testing for SQL Injection vulnerabilities...');
  await testSQLInjection(page, testUrl);
  
  await browser.close();
}

main().catch(console.error);
